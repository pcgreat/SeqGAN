import tensorflow as tf
from tensorflow.contrib.seq2seq import BasicDecoder
from tensorflow.python.ops import tensor_array_ops, control_flow_ops
from tensorflow.python.ops.rnn_cell_impl import BasicLSTMCell, LSTMStateTuple


class Generator(object):
    def __init__(self, num_emb, batch_size, emb_dim, hidden_dim,  # num_emb is vocab_size
                 sequence_length, start_token,
                 learning_rate=0.01, reward_gamma=0.95):
        self.num_emb = num_emb
        self.batch_size = batch_size
        self.emb_dim = emb_dim
        self.hidden_dim = hidden_dim
        self.sequence_length = sequence_length
        self.start_token = tf.constant([start_token] * self.batch_size, dtype=tf.int32)
        self.learning_rate = tf.Variable(float(learning_rate), trainable=False)
        self.reward_gamma = reward_gamma
        self.d_params = []
        self.temperature = 1.0
        self.grad_clip = 5.0

        self.build_placeholder()
        self.build_model()

    def build_placeholder(self):
        # placeholder definition
        self.x = tf.placeholder(tf.int32, shape=[self.batch_size,
                                                 self.sequence_length])  # sequence of tokens generated by generator
        self.rewards = tf.placeholder(tf.float32, shape=[self.batch_size,
                                                         self.sequence_length])  # get from rollout policy and discriminator

    def build_model(self):
        self.expected_reward = tf.Variable(tf.zeros([self.sequence_length]), trainable=False)

        with tf.variable_scope('generator'):
            self.g_embeddings = tf.get_variable("g_embeddings", [self.num_emb, self.emb_dim], dtype=tf.float32,
                                                initializer=tf.variance_scaling_initializer)
            self.g_recurrent_unit = BasicLSTMCell(self.hidden_dim, name="g_lstm")
            self.g_output_unit = tf.layers.Dense(units=self.num_emb, activation=None, name="g_dense")  # logits

            # processed for batch
            with tf.device("/cpu:0"):
                self.embed_x = tf.nn.embedding_lookup(self.g_embeddings, self.x)

            self.processed_x = tf.transpose(self.embed_x, perm=[1, 0, 2])  # seq_length x batch_size x emb_dim

            # Initial states
            self.h0 = tf.zeros([self.batch_size, self.hidden_dim])
            self.state_t0 = LSTMStateTuple(self.h0, self.h0)  # c0, h0

            gen_o = tensor_array_ops.TensorArray(dtype=tf.float32, size=self.sequence_length,
                                                 dynamic_size=False, infer_shape=True)
            gen_x = tensor_array_ops.TensorArray(dtype=tf.int32, size=self.sequence_length,
                                                 dynamic_size=False, infer_shape=True)

            def _g_recurrence(i, x_t, state_t0, gen_o, gen_x):
                h_t, state_t = self.g_recurrent_unit(x_t, state_t0)  # hidden_memory_tuple
                o_t = self.g_output_unit(h_t)  # batch x vocab , logits not prob
                log_prob = tf.nn.log_softmax(o_t)
                next_token = tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)
                x_tp1 = tf.nn.embedding_lookup(self.g_embeddings, next_token)  # batch x emb_dim
                gen_o = gen_o.write(i, tf.reduce_sum(tf.multiply(tf.one_hot(next_token, self.num_emb, 1.0, 0.0),
                                                                 tf.nn.softmax(o_t)), 1))  # [batch_size] , prob
                gen_x = gen_x.write(i, next_token)  # indices, batch_size
                return i + 1, x_tp1, state_t, gen_o, gen_x

            _, _, _, self.gen_o, self.gen_x = control_flow_ops.while_loop(
                cond=lambda i, _1, _2, _3, _4: i < self.sequence_length,
                body=_g_recurrence,
                loop_vars=(tf.constant(0, dtype=tf.int32),
                           tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.state_t0, gen_o, gen_x))

            self.gen_x = self.gen_x.stack()  # seq_length x batch_size
            self.gen_x = tf.transpose(self.gen_x, perm=[1, 0])  # batch_size x seq_length

            # supervised pretraining for generator
            # TODO: padding
            dec_inp = tf.pad(self.embed_x, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]
            helper = tf.contrib.seq2seq.TrainingHelper(
                inputs=dec_inp,
                sequence_length=[self.sequence_length] * self.batch_size)
            decoder = BasicDecoder(
                cell=self.g_recurrent_unit,
                helper=helper,
                initial_state=self.state_t0)

            decoder_output, _, _ = tf.contrib.seq2seq.dynamic_decode(
                decoder=decoder,
                maximum_iterations=self.sequence_length  # 2 * tf.reduce_max(self.sequence_length)
            )
            rnn_output, sample_id = decoder_output
            training_logits = self.g_output_unit(rnn_output)
            # pretrain loss
            mask_fn = lambda l: tf.sequence_mask(l, self.sequence_length, dtype=tf.float32)
            mask = mask_fn([self.sequence_length] * self.batch_size)  # TODO: padding

            flattened_pretrain_loss = tf.contrib.seq2seq.sequence_loss(
                logits=training_logits,
                targets=self.x,
                weights=mask,
                average_across_timesteps=True,
                average_across_batch=True)
            self.pretrain_loss = tf.reduce_sum(flattened_pretrain_loss)

            # get trainable vars # question: why adam has no var
            generator_vars = tf.trainable_variables(scope="generator")

            # training updates
            pretrain_opt = self.g_optimizer(self.learning_rate)

            self.pretrain_grad, _ = tf.clip_by_global_norm(tf.gradients(self.pretrain_loss, generator_vars),
                                                           self.grad_clip)
            self.pretrain_updates = pretrain_opt.apply_gradients(zip(self.pretrain_grad, generator_vars))

            #######################################################################################################
            #  Unsupervised Training
            #######################################################################################################

            self.g_loss = -tf.reduce_sum(
                tf.reshape(flattened_pretrain_loss, [-1]) * tf.reshape(self.rewards, [-1]))

            g_opt = self.g_optimizer(self.learning_rate)

            self.g_grad, _ = tf.clip_by_global_norm(tf.gradients(self.g_loss, generator_vars), self.grad_clip)
            self.g_updates = g_opt.apply_gradients(zip(self.g_grad, generator_vars))

    def generate(self, sess):
        outputs = sess.run(self.gen_x)
        return outputs

    def pretrain_step(self, sess, x):  # train
        outputs = sess.run([self.pretrain_updates, self.pretrain_loss], feed_dict={self.x: x})
        return outputs

    def pretrain_step_eval(self, sess, x):
        pretrain_loss = sess.run(self.pretrain_loss,
                           feed_dict={self.x: x})
        return pretrain_loss

    def step_eval(self, sess, x, rewards):
        g_loss, pretrain_loss = sess.run([self.g_loss, self.pretrain_loss],
                           feed_dict={self.x: x, self.rewards: rewards})
        return g_loss, pretrain_loss

    def init_vector(self, shape):
        return tf.zeros(shape)

    def g_optimizer(self, *args, **kwargs):
        return tf.train.AdamOptimizer(*args, **kwargs)
