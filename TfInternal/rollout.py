import numpy as np
import tensorflow as tf
from tensorflow.python.ops import tensor_array_ops, control_flow_ops
from tensorflow.python.ops.rnn_cell_impl import BasicLSTMCell, LSTMStateTuple


class ROLLOUT(object):
    def __init__(self, generator, update_rate):
        self.generator = generator
        self.update_rate = update_rate

        self.num_emb = self.generator.num_emb
        self.batch_size = self.generator.batch_size
        self.emb_dim = self.generator.emb_dim
        self.hidden_dim = self.generator.hidden_dim
        self.sequence_length = self.generator.sequence_length
        self.start_token = tf.identity(self.generator.start_token)
        self.learning_rate = self.generator.learning_rate

        self.build_placeholder()
        self.build_model()
        self.update_params_helper()

    def build_placeholder(self):
        # placeholder definition
        self.x = tf.placeholder(tf.int32, shape=[self.batch_size,
                                                 self.sequence_length])  # sequence of tokens generated by generator
        self.given_num = tf.placeholder(tf.int32)

    def build_model(self):
        with tf.variable_scope('rollout'):
            self.g_embeddings = tf.get_variable("g_embeddings", [self.num_emb, self.emb_dim], dtype=tf.float32,
                                                initializer=tf.variance_scaling_initializer)
            self.g_recurrent_unit = BasicLSTMCell(self.hidden_dim, name="g_lstm2")
            self.g_output_unit = tf.layers.Dense(units=self.num_emb, activation=None, name="g_dense2")  # logits

            #####################################################################################################

            # processed for batch
            with tf.device("/cpu:0"):
                self.processed_x = tf.transpose(tf.nn.embedding_lookup(self.g_embeddings, self.x),
                                                perm=[1, 0, 2])  # seq_length x batch_size x emb_dim

            ta_emb_x = tensor_array_ops.TensorArray(
                dtype=tf.float32, size=self.sequence_length)
            ta_emb_x = ta_emb_x.unstack(self.processed_x)

            ta_x = tensor_array_ops.TensorArray(dtype=tf.int32, size=self.sequence_length)
            ta_x = ta_x.unstack(tf.transpose(self.x, perm=[1, 0]))
            #####################################################################################################

            self.h0 = tf.zeros([self.batch_size, self.hidden_dim])
            self.state_t0 = LSTMStateTuple(self.h0, self.h0)  # c0, h0

            gen_x = tensor_array_ops.TensorArray(dtype=tf.int32, size=self.sequence_length,
                                                 dynamic_size=False, infer_shape=True)

            # When current index i < given_num, use the provided tokens as the input at each time step
            def _g_recurrence_1(i, x_t, state_t0, given_num, gen_x):
                h_t, state_t = self.g_recurrent_unit(x_t, state_t0)  # hidden_memory_tuple
                x_tp1 = ta_emb_x.read(i)
                gen_x = gen_x.write(i, ta_x.read(i))
                return i + 1, x_tp1, state_t, given_num, gen_x

            # When current index i >= given_num, start roll-out, use the output as time step t as the input at time step t+1
            def _g_recurrence_2(i, x_t, state_t0, given_num, gen_x):
                h_t, state_t = self.g_recurrent_unit(x_t, state_t0)  # hidden_memory_tuple
                o_t = self.g_output_unit(h_t)  # batch x vocab , logits not prob
                log_prob = tf.nn.log_softmax(o_t)
                next_token = tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)
                x_tp1 = tf.nn.embedding_lookup(self.g_embeddings, next_token)  # batch x emb_dim
                gen_x = gen_x.write(i, next_token)  # indices, batch_size
                return i + 1, x_tp1, state_t, given_num, gen_x

            i, x_t, state_t, given_num, self.gen_x = control_flow_ops.while_loop(
                cond=lambda i, _1, _2, given_num, _4: i < given_num,
                body=_g_recurrence_1,
                loop_vars=(tf.constant(0, dtype=tf.int32),
                           tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.state_t0, self.given_num,
                           gen_x))

            _, _, _, _, self.gen_x = control_flow_ops.while_loop(
                cond=lambda i, _1, _2, _3, _4: i < self.sequence_length,
                body=_g_recurrence_2,
                loop_vars=(i, x_t, state_t, given_num, self.gen_x))

            self.gen_x = self.gen_x.stack()  # seq_length x batch_size
            self.gen_x = tf.transpose(self.gen_x, perm=[1, 0])  # batch_size x seq_length

    def get_reward(self, sess, input_x, rollout_num, discriminator):
        rewards = []
        for i in range(rollout_num):
            # given_num between 1 to sequence_length - 1 for a part completed sentence
            for given_num in range(1, self.sequence_length):
                feed = {self.x: input_x, self.given_num: given_num}
                samples = sess.run(self.gen_x, feed)
                feed = {discriminator.input_x: samples, discriminator.dropout_keep_prob: 1.0}
                ypred_for_auc = sess.run(discriminator.ypred_for_auc, feed)
                ypred = np.array([item[1] for item in ypred_for_auc])
                if i == 0:
                    rewards.append(ypred)
                else:
                    rewards[given_num - 1] += ypred

            # the last token reward
            feed = {discriminator.input_x: input_x, discriminator.dropout_keep_prob: 1.0}
            ypred_for_auc = sess.run(discriminator.ypred_for_auc, feed)
            ypred = np.array([item[1] for item in ypred_for_auc])
            if i == 0:
                rewards.append(ypred)
            else:
                # completed sentence reward
                rewards[self.sequence_length - 1] += ypred

        rewards = np.transpose(np.array(rewards)) / (1.0 * rollout_num)  # batch_size x seq_length
        return rewards

    def update_params_helper(self):
        self.update_op = [
            self.g_embeddings.assign(
                self.g_embeddings * self.update_rate +
                self.generator.g_embeddings * (1 - self.update_rate)),
            self.g_recurrent_unit._kernel.assign(
                self.g_recurrent_unit._kernel * self.update_rate +
                self.generator.g_recurrent_unit._kernel * (1 - self.update_rate)),
            self.g_recurrent_unit._bias.assign(
                self.g_recurrent_unit._bias * self.update_rate +
                self.generator.g_recurrent_unit._bias * (1 - self.update_rate)),
            self.g_output_unit.kernel.assign(
                self.g_output_unit.kernel * self.update_rate +
                self.generator.g_output_unit.kernel * (1 - self.update_rate)),
            self.g_output_unit.bias.assign(
                self.g_output_unit.bias * self.update_rate +
                self.generator.g_output_unit.bias * (1 - self.update_rate))
        ]

    def update_params(self, sess):
        sess.run([self.update_op])
